# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.com/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
#  .idea/

# VS Code
.vscode/
*.code-workspace

# IOA Core specific exclusions
# =============================

# Private/Internal content (excluded from OSS)
_internal/
private/
enterprise/
confidential/

# Generated reports and logs
reports/
logs/
*.log
*.log.*

# Audit and security logs
audit_chain.jsonl
audit_*.jsonl
security_*.log
.secrets.baseline

# Configuration with secrets
.env
.env.local
.env.production
.env.staging
config/secrets/
config/*.key
config/*.pem
config/*.p12

# Temporary and cache files
.tmp_config/
.cursor/
.DS_Store
*.tmp
*.temp
*.swp
*.swo
*~

# Performance and benchmark artifacts
benchmarks/results/
performance/reports/
*.prof
*.profile

# Test artifacts
test_artifacts/
test_outputs/
.coverage.*
htmlcov/

# Documentation build artifacts
docs/_build/
docs/site/
site/

# IDE and editor files
.vscode/
.idea/
*.sublime-*
.atom/
.brackets.json

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
*.bak
*.backup
*.old
*.orig

# Archive files
*.tar
*.tar.gz
*.zip
*.rar
*.7z

# Database files
*.db
*.sqlite
*.sqlite3

# Certificate and key files
*.crt
*.key
*.pem
*.p12
*.pfx
*.der

# Private keys and certificates (CRITICAL - never commit)
dev_private_key.pem
dev_public_key.pem
new_private_key.pem
new_public_key.pem
*_private_key.pem
*_public_key.pem

# Docker
.dockerignore
docker-compose.override.yml

# IOA QA artifacts and build outputs
docs/ops/qa_artifacts/**
site/
docs/site/
docs/ops/control-center/
docs/ops/temp*/

# Root hygiene enforcement - prevent stray files in repo root
# ============================================================

# Local secrets & env
.env.local

# Artifacts & logs (never in root)
*.log
/artifacts/
/logs/
/benchmarks/

# Cursor/workspace temp
.cursor/
.cursor-cache/
.DS_Store

# Root-level artifact patterns (enforced by CI)
# These should be in subdirectories, not repo root
*_snapshot.json
*_metrics.log
*_benchmark.log
*_error.log
*_results.json
*_report.json
health_report.json
provider_metrics.log
ollama_*.log
ollama_*.json
ollama_*.txt
ioa_doctor_snapshot.json
smoketest_results.json
shell_env.json

# ---- IOA hygiene ----
# Artifacts & logs
artifacts/
logs/
audit_chain/
provider_metrics.*
*.log
*.tmp
*.cache
# Local env
.env
.env.local
.env.*.local
*.env.backup
.env.local.example.backup
.env*
# Python build & venv
__pycache__/
*.pyc
dist/
build/
.venv/
venv/
# OS cruft
.DS_Store

# Build artifacts
__pycache__/
*.py[cod]
*$py.class
.pytest_cache/
dist/
build/
*.egg-info/
test_results/
releases/
evidence/releases/
site/
.venv*/

# Internal CI workflows (run locally via ioa-ops)
.github/workflows/no-enterprise-keywords.yml
.github/workflows/canonical-scan.yml
.github/workflows/preflight*.yml
.github/workflows/keyword-scan*.yml

# IOA specific
.ci/_externals/
.venv_oss/
docs/_last_local_gate_raw.txt
docs/_broken_links_todo.txt

# Feature sync testing
tests/feature_sync/__pycache__/
.venv-feature/
docs/internal_tmp/

# Temporary header fix script
/tmp/fix_headers.py
