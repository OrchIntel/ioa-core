[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ioa-core"
version = "2.5.1"
description = "Intelligent Orchestration Architecture Core - Open-source platform for orchestrating modular AI agents with memory-driven collaboration and governance mechanisms"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "OrchIntel Systems Ltd.", email = "maintainers@orchintel.com"},
    {name = "IOA Project Contributors", email = "contributors@orchintel.com"}
]
maintainers = [
    {name = "IOA Core Team", email = "core-maintainers@orchintel.com"}
]
keywords = ["ai", "orchestration", "agents", "governance", "memory", "llm", "workflow"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.11.0",
    "cryptography>=3.4.0",
    "python-dotenv>=0.19.0",
    "structlog>=23.0.0",
    "rich>=13.0.0",
    "tqdm>=4.64.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.20.0",
    "mkdocstrings-python>=1.0.0",
]
performance = [
    "psutil>=5.9.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]
bench = [
    # BEIR/MTEB benchmarks for evaluation (OSS-safe - no bundled datasets)
    "beir>=2.0.0",
    "mteb>=1.0.0",
    "datasets>=2.0.0",
    "transformers>=4.0.0",
    "torch>=2.0.0",
    "scikit-learn>=1.0.0",
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "tqdm>=4.64.0",
]
core = []  # Core package has no additional dependencies
enterprise = [
    "cryptography>=3.4.0",
    "pydantic>=2.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "sqlalchemy>=2.0.0",
    "redis>=4.0.0",
]
saas = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "celery>=5.3.0",
    "flower>=2.0.0",
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.0",
]

[project.scripts]
ioa = "ioa_core.cli:main"

[project.urls]
Homepage = "https://github.com/orchintel/ioa-core"
Documentation = "https://ioa-core.readthedocs.io/"
Repository = "https://github.com/orchintel/ioa-core.git"
"Bug Tracker" = "https://github.com/orchintel/ioa-core/issues"
"Source Code" = "https://github.com/orchintel/ioa-core"
"Security Policy" = "https://github.com/orchintel/ioa-core/security/policy"

[project.entry-points."console_scripts"]
ioa = "ioa_core.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["pytest", "click", "pydantic"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "smoke: marks tests as smoke tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
